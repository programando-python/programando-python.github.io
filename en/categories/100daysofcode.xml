<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learning programming (Posts about 100daysofcode)</title><link>https://programando-python.github.io/</link><description></description><atom:link href="https://programando-python.github.io/en/categories/100daysofcode.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2022 &lt;a href="mailto:nahueltori@gmail.com"&gt;Nahuel Tori&lt;/a&gt; </copyright><lastBuildDate>Thu, 27 Oct 2022 13:47:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>100 dÃ­as de cÃ³digo: DÃ­a 2</title><link>https://programando-python.github.io/en/posts/ciendiasdecodigo/dia-2/</link><dc:creator>Nahuel Tori</dc:creator><description>&lt;h2&gt;100 dÃ­as de cÃ³digo&lt;/h2&gt;
&lt;h3&gt;Input y Variables&lt;/h3&gt;
&lt;h3&gt;DÃ­a 2&lt;/h3&gt;
&lt;h4&gt;Leyendo la entrada del usuario&lt;/h4&gt;
&lt;p&gt;Vamos a ver cÃ³mo funciona el comando &lt;code&gt;input&lt;/code&gt;. Se utiliza cuando el usuario debe ingresar informaciÃ³n en la computadora. Es muy parecido al &lt;code&gt;print&lt;/code&gt;, excepto que muestra un mensaje en la consola y luego &lt;em&gt;espera&lt;/em&gt; al usuario hasta que escriba algo en el teclado y aprete Enter.&lt;/p&gt;
&lt;p&gt;Copia el siguiente cÃ³digo en el editor y apretÃ¡ &lt;code&gt;run&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Â¿CuÃ¡l es tu nombre?: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Variables&lt;/h4&gt;
&lt;p&gt;Bien, &lt;code&gt;input&lt;/code&gt; solicita algo al usuario, lo toma pero no tiene dÃ³nde ponerlo. Podemos cambiar eso con una &lt;code&gt;variable&lt;/code&gt;, que es un valor que podemos usar para ponerle nombre y guardar datos.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;nombreDeVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Nombre: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;AquÃ­, &lt;code&gt;nombreDeVariable&lt;/code&gt; es el nombre que le damos a nuestra variable, el cual crea un espacio en la memoria y donde podemos asignarle valores usando el sÃ­mbolo &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Nombrando variables&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Las variable pueden tener cualquier nombre que desees, pero &lt;strong&gt;no se pueden usar espacios&lt;/strong&gt;. Puedes usar:&lt;/li&gt;
&lt;li&gt;guiones_bajos_entre_palabras&lt;/li&gt;
&lt;li&gt;camelCaseParaFacilLectura&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ğŸ‘‰ BorrÃ¡ todo el cÃ³digo de tu editor y copiÃ¡ esto en el archivo &lt;code&gt;main.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;miNombre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Â¿CuÃ¡l es tu nombre?: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;miEdad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Â¿CuÃ¡ntos aÃ±os tienes?: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Uh, Â¡sos muy viejo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;replit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Â¿Te gusta Replit? "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Â¡Claro que te gusta!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Â¡Bien! Ahora tenemos 3 variables:
- &lt;code&gt;miNombre&lt;/code&gt; tiene el nombre del usuario guardado.
- &lt;code&gt;miEdad&lt;/code&gt; guarda su edad.
- &lt;code&gt;replit&lt;/code&gt; guarda quÃ© siente el usuario sobre este sitio.&lt;/p&gt;
&lt;h4&gt;Mostrando variables&lt;/h4&gt;
&lt;p&gt;Podemos ver el contenido de una variable imprimiendo su valor por la consola. Para eso, debemos usar la instrucciÃ³n &lt;code&gt;print&lt;/code&gt; y el nombre de la variable que usamos al otro lado del &lt;code&gt;=&lt;/code&gt; en el comando &lt;code&gt;input&lt;/code&gt;.&lt;br&gt;
En el cÃ³digo, ahora podemos conocer el nombre usando &lt;code&gt;print(miNombre)&lt;/code&gt; o la edad usando &lt;code&gt;print(miEdad)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;ğŸ‘‰ Vamos a probarlo! Agrega este cÃ³digo al final y apreta&lt;code&gt;run&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Entonces, tu eres"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;miNombre&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"y con la asombrosa edad de"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;miEdad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"y Replit para ti claramente es"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;replit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Â¿Pudiste ver lo que hizo &lt;code&gt;print()&lt;/code&gt;?
* Si hay texto literal (con comillas dobles &lt;code&gt;" "&lt;/code&gt; o simples &lt;code&gt;' '&lt;/code&gt;) dentro de los &lt;code&gt;( )&lt;/code&gt;, el texto es mostrado.
* Si hay un nombre de variable dentro de los &lt;code&gt;( )&lt;/code&gt;, entonces se muetra el contenido de esa variable.
* Si no hay nada, entonces se muestra una lÃ­nea en blanco.&lt;/p&gt;
&lt;p&gt;Esta cÃ³digo se ve un poco raro, pero en breve ya lo vamos a mejorar.&lt;/p&gt;
&lt;h4&gt;Posibles errores&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Primero, borra el cÃ³digo que haya en tu &lt;code&gt;main.py&lt;/code&gt;. Luego, copia el bloque de cÃ³digo de ejemplo, aprieta &lt;code&gt;run&lt;/code&gt; y mira quÃ© errores aparecen. Arregla los errores y corre &lt;code&gt;run&lt;/code&gt; de nuevo hasta que todo funcione.&lt;/em&gt;
&lt;em&gt;Al final podrÃ¡s encontrar las soluciones.&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;Syntax Error&lt;/h5&gt;
&lt;p&gt;ğŸ‘‰ Prueba el siguiente cÃ³digo en el editor. Luego, arreglalo hasta que funcione:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;mi&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Â¿QuiÃ©n estÃ¡ ahÃ­?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mi&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Â¿Encontraste este error? Â¿QuÃ© podÃ©s arreglar?&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"main.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;mi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Â¿QuiÃ©n estÃ¡ ahÃ­?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;invalid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;syntax&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;Name Error&lt;/h5&gt;
&lt;p&gt;ğŸ‘‰ Prueba y arregla el siguiente trozo de cÃ³digo:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;laAbuela&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Â¿CÃ³mo estÃ¡ la abuela? ğŸ˜˜"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;laabuela&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;Â¿CÃ³mo estÃ¡ la abuela? ğŸ˜˜ bien
Traceback (most recent call last):
  File "main.py", line 2, in &amp;lt;module&amp;gt;
    print(laabuela)
NameError: name 'laabuela' is not defined
&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;Respuestas&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Syntax Error: Hay un espacio en el nombre de la variable, lo viste? No usamos espacios en los nombres de variables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name Error: La variable que intentamos mostrar &lt;strong&gt;no&lt;/strong&gt; es la misma que creamos en primer lugar. La capitalizaciÃ³n no es la misma. TambiÃ©n sucederÃ¡ lo mismo cuando queramos mostrar una variable que no creamos aun. &lt;strong&gt;Siempre&lt;/strong&gt; hay que crear la variable antes de mostrarla.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Este sÃ³lo serÃ¡ raro...&lt;/h5&gt;
&lt;p&gt;ğŸ‘‰ Prueba este cÃ³digo para ver quÃ© pasa:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;miAlmuerzo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Â¿QuÃ© querÃ©s para almorzar? "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Tu orden es la siguiente: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"miAlmuerzo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Lo antes posible!!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;Â¿QuÃ© querÃ©s para almorzar? SÃ¡ndwich
Tu orden es la siguiente: 
miAlmuerzo
Lo antes posible!!
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Respuesta:&lt;/li&gt;
&lt;li&gt;Quisimos mostrar una variable, pero quedÃ³ entre comillas!&lt;/li&gt;
&lt;li&gt;Recuerda: Las comillas imprimen literalmente lo que hay dentro.&lt;/li&gt;
&lt;li&gt;Si deseas mostrar el &lt;strong&gt;contenido&lt;/strong&gt; de una variable, &lt;em&gt;no hay que usar&lt;/em&gt; comillas.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;DesafÃ­o del DÃ­a 2&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Pregunta por el nombre del usuario, su comida favorita, mÃºsica favorita y dÃ³nde vive. Puedes inventar algunas otras preguntas.&lt;/li&gt;
&lt;li&gt;Guarda todas las respuestas en diferentes variables.&lt;/li&gt;
&lt;li&gt;Imprime una oraciÃ³n completa que incluya todas las respuestas del usuario.&lt;/li&gt;
&lt;li&gt;Agrega una lÃ­nea al final con una afirmaciÃ³n positiva. Dile que es muy bueno en alguna de esas cosas!.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Si pudiste resolverlo o necesitÃ¡s ayuda:&lt;/h3&gt;
&lt;p&gt;Â¡Escribilo en los comentarios!&lt;br&gt;
Tu aporte, tanto sea de la soluciÃ³n como de cualquier pregunta, es bienvenido y le sirve a todos los que lean esto.&lt;br&gt;
TambiÃ©n, podÃ©s leer &lt;a href="https://programando-python.github.io/en/posts/como-encontrar-ayuda.md"&gt;esta guÃ­a de ayuda&lt;/a&gt; sobre cÃ³mo encontrar la informaciÃ³n necesaria para resolverlo.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;## Â¿QuÃ© aprendiste?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tomate un minuto para pensar quÃ© aprendiste con este ejercicio.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Â¿Alguna nueva instrucciÃ³n?&lt;/li&gt;
&lt;li&gt;Â¿Por quÃ© Python nos da funciones ya listas para usar?&lt;/li&gt;
&lt;li&gt;Â¿QuÃ© es el cÃ³digo fuente y quÃ© es la ejecuciÃ³n de un programa?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Â¡Muy bien!&lt;br&gt;
En breve, aparecerÃ¡ publicado el dÃ­a 3. Â¡Nos vemos!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</description><guid>https://programando-python.github.io/en/posts/ciendiasdecodigo/dia-2/</guid><pubDate>Thu, 27 Oct 2022 13:42:41 GMT</pubDate></item><item><title>100 dÃ­as de cÃ³digo: DÃ­a 1</title><link>https://programando-python.github.io/en/posts/ciendiasdecodigo/dia-1/</link><dc:creator>Nahuel Tori</dc:creator><description>&lt;h2&gt;100 dÃ­as de cÃ³digo&lt;/h2&gt;
&lt;h3&gt;Â¡Hola, programador!&lt;/h3&gt;
&lt;p&gt;Vamos a comenzar nuestro propio desafÃ­o para aprender a programar. Y lo haremos utilizando un mÃ©todo que probÃ³ ser muy efectivo. 100 dÃ­as de cÃ³digo surgiÃ³ con un chico de secundaria que querÃ­a aprender a programar. AcÃ¡ podÃ©s leer toda su historia -&amp;gt; &lt;a href="https://www.freecodecamp.org/espanol/news/el-desafio-100daysofcode-su-historia-y-por-que-debes-probarlo-para-2022/"&gt;link&lt;/a&gt;.
Otros desafÃ­o muy conocido es &lt;a href="https://hourofcode.com/es"&gt;La Hora del cÃ³digo&lt;/a&gt;, te invito a explorar el sitio y participar de alguna actividad.&lt;/p&gt;
&lt;p&gt;Nosotros iremos transitando cada dÃ­a de actividades de los 100 dÃ­as de cÃ³digo en el sitio &lt;a href="https://www.replit.com"&gt;Replit&lt;/a&gt;. Si aun no tienes cuenta, adelÃ¡ntate y &lt;a href="https://replit.com/signup"&gt;crea una&lt;/a&gt;!
Luego de loguearte en el sitio, entra a la secciÃ³n Learn y podrÃ¡s encontrar los &lt;a href="https://replit.com/learn/100-days-of-python"&gt;100 dÃ­as de cÃ³digo con Python&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;DÃ­a 1&lt;/h3&gt;
&lt;h4&gt;El espacio de trabajo&lt;/h4&gt;
&lt;p&gt;Sobre la izquierda de la pantalla, encontraremos la consigna a desarrollar. Al pie de cada explicaciÃ³n, tenemos flechas para avanzar a la siguiente lecciÃ³n, o volver a repetir o releer alguna pasada. La parte central es donde escribiremos el cÃ³digo, que se guarda en el archivo llamado &lt;code&gt;main.py&lt;/code&gt; como se ve en la parte superior. Hacia la derecha, estÃ¡ la consola, que es donde el cÃ³digo se ejecuta e interactÃºa con el usuario. Abajo, tenemos el video con la explicaciÃ³n de David, quien habla un perfecto inglÃ©s. Les recomiendo activar los subtÃ­tulos: en inglÃ©s si les ayuda a entender mejor, y tambiÃ©n se puede configurar la traducciÃ³n automÃ¡tica a EspaÃ±ol.&lt;/p&gt;
&lt;p&gt;CÃ³mo vamos a trabajar: Leemos la consigna, escuchamos el video, y &lt;strong&gt;lo pausamos&lt;/strong&gt; cada vez que sea necesario. Una vez que entendimos la consigna, pausamos el video y escribimos el cÃ³digo. Lo bueno del video es que podemos volver a verlo todas las veces que sea necesario. Si aun no entendemos algo, tambiÃ©n podremos guiarnos con este mismo texto: tendremos todas las consignas de cada dÃ­a traducidas y explicadas.&lt;/p&gt;
&lt;h4&gt;Manos a la obra&lt;/h4&gt;
&lt;p&gt;Vamos a empezar con la primer lecciÃ³n que todo programador debe hacer: saludar al mundo. En la pantalla central, donde escribimos cÃ³digo en el archivo &lt;code&gt;main.py&lt;/code&gt;, escribimos la siguiente lÃ­nea y clickeamos &lt;code&gt;Run&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello Replit"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cuando veas lÃ­neas de cÃ³digo como las anteriores, podÃ©s copiar y pegarlas en el editor, o escribirlas directamente.
Si todo funcionÃ³ bien, deberÃ­as ver en la ventana de la consola, tu hermoso mensaje!!&lt;/p&gt;
&lt;h4&gt;La primer instrucciÃ³n&lt;/h4&gt;
&lt;p&gt;Acabamos de aprender el primer comando: &lt;code&gt;print&lt;/code&gt;. Lo que hace es mostrar en la consola lo que sea que haya entre parÃ©ntesis. Es la forma en que nuestros programas muestran texto al usuario.&lt;br&gt;
* Las comillas "" se usan para indicar que se desea mostrar exactamente esa cadena de texto, es decir, todo lo que estÃ© dentro de las comillas.
* El conjunto de texto, o lo que sea que haya entre las comillas, es llamado &lt;em&gt;string&lt;/em&gt; o cadena.&lt;/p&gt;
&lt;p&gt;MÃ¡s cÃ³digo para probar:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Bueno,"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"vamos a mostrar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mÃ¡s lÃ­neas de cÃ³digo."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"""Cualquier cosa que&lt;/span&gt;
&lt;span class="s2"&gt;comience con triple comillas&lt;/span&gt;
&lt;span class="s2"&gt;y termine tambiÃ©n con triple&lt;/span&gt;
&lt;span class="s2"&gt;comillas puede ocupas varias lÃ­neas e&lt;/span&gt;
&lt;span class="s2"&gt;incluso contener " comillas sin&lt;/span&gt;
&lt;span class="s2"&gt;que nada se rompa."""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Posibles errores&lt;/h4&gt;
&lt;p&gt;A veces podemos tener errores de sintaxis al escribir cÃ³digo. Â¿&lt;a href="https://es.wikipedia.org/wiki/Sintaxis"&gt;QuÃ© es la sintaxis&lt;/a&gt;?. Estos son los mÃ¡s comunes:&lt;/p&gt;
&lt;h5&gt;Name Error&lt;/h5&gt;
&lt;p&gt;Este error lo encontraremos cuando:
- Escribimos mal el nombre de una funciÃ³n.
- Deletreamos mal algÃºn nombre.
- Agregamos o sacamos alguna mÃ¡yÃºscula donde no debemos.&lt;/p&gt;
&lt;p&gt;ProbÃ¡ el siguiente cÃ³digo en el editor. Luego, arreglalo hasta que funcione:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Â¿Seguro que estÃ¡ mal?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Siempre es importante leer los mensajes, que nos brindan ayuda para encontrar nuestro error.&lt;/p&gt;
&lt;h5&gt;Syntax Error&lt;/h5&gt;
&lt;p&gt;Este mensaje lo encontramos cuando:
- El orden de los sÃ­mbolos es incorrecto.
- Olvidamos algÃºn parÃ©ntesis ( ) o comillas " ".&lt;/p&gt;
&lt;p&gt;Prueben y arreglen los siguientes trozos de cÃ³digo:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Por favor funcionÃ¡!!!"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ahora&lt;/span&gt; &lt;span class="n"&gt;sÃ­&lt;/span&gt; &lt;span class="n"&gt;tiene&lt;/span&gt; &lt;span class="n"&gt;que&lt;/span&gt; &lt;span class="n"&gt;andar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;DesafÃ­o del DÃ­a 1&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Escribir tu nombre completo y la fecha del dÃ­a de hoy por consola, en lÃ­neas de cÃ³digo separadas.&lt;/li&gt;
&lt;li&gt;Mostrar por consola el texto de abajo. IntentÃ¡ hacerlo con sÃ³lo 1 instrucciÃ³n &lt;code&gt;print&lt;/code&gt;:
I am signing up for Replit's 100 days of Python challenge!
I will make sure to spend some time every day coding along, for a minimum of 10 minutes a day.
I'll be using Replit, an amazing online IDE so I can do this from my phone wherever I happend to be. No excuses for not coding from the middle of a field!&lt;/li&gt;
&lt;li&gt;En la lÃ­nea siguiente, muestra &lt;code&gt;Hoy me siento&lt;/code&gt; mÃ¡s un emoji que demuestre cÃ³mo te estÃ¡s sintiendo al respecto de este desafÃ­o.&lt;/li&gt;
&lt;li&gt;Agrega una lÃ­nea mÃ¡s con &lt;code&gt;PodÃ©s seguir mi progreso en replit.com/@&lt;/code&gt; y tu nombre de usuario de replit. Esta es una buena manera de incentivar tu progreso cada dÃ­a!.&lt;/li&gt;
&lt;li&gt;Dale &lt;code&gt;Run&lt;/code&gt; a tu programa.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Si pudiste resolverlo o necesitÃ¡s ayuda:&lt;/h3&gt;
&lt;p&gt;Â¡Escribilo en los comentarios!&lt;br&gt;
Tu aporte, tanto sea de la soluciÃ³n como de cualquier pregunta, es bienvenido y le sirve a todos los que lean esto.&lt;br&gt;
TambiÃ©n, podÃ©s leer &lt;a href="https://programando-python.github.io/en/posts/como-encontrar-ayuda.md"&gt;esta guÃ­a de ayuda&lt;/a&gt; sobre cÃ³mo encontrar la informaciÃ³n necesaria para resolverlo.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;## Â¿QuÃ© aprendiste?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tomate un minuto para pensar quÃ© aprendiste con este ejercicio.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Â¿Alguna nueva instrucciÃ³n?&lt;/li&gt;
&lt;li&gt;Â¿Por quÃ© Python nos da funciones ya listas para usar?&lt;/li&gt;
&lt;li&gt;Â¿QuÃ© es el cÃ³digo fuente y quÃ© es la ejecuciÃ³n de un programa?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Â¡Muy bien!&lt;br&gt;
Avancemos con el siguiente: &lt;a href="https://programando-python.github.io/en/posts/ciendiasdecodigo/dia-2"&gt;DÃ­a 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</description><guid>https://programando-python.github.io/en/posts/ciendiasdecodigo/dia-1/</guid><pubDate>Mon, 24 Oct 2022 12:09:41 GMT</pubDate></item></channel></rss>